import numpy as np 

MAX = 999999

def TSP(mask, pos, graph, dp,n, visited):
	if mask == visited:
		return graph[pos][0]
	if dp[mask][pos] != -1:
		return dp[mask][pos]
	
	ans = MAX 
	for city in range(0, n):
		if ((mask & (1 << city)) == 0):
			new = graph[pos][city] + TSP(mask|(1<<city),city, graph, dp, n, visited)
			ans = min(ans, new)
	
	dp[mask][pos]=ans
	return dp[mask][pos]

# this is to convert from a dataset consisting of latitude & longtitude to a distance matrix since most big datasets are of similar type
# code from bard but with few additions

data = np.loadtxt('alg2.txt')

# Calculate the distance matrix
distance_matrix = np.zeros((len(data), len(data)))

for i in range(len(data)):
    for j in range(i + 1, len(data)):
        distance = np.linalg.norm(data[i] - data[j])
        distance_matrix[i, j] = distance
        distance_matrix[j, i] = distance
print("matrix from coordinates with rounding")
print(distance_matrix.round().astype(int))
print("matrix from coordinates without rounding")
print(distance_matrix)
# there are some differences for number like row one last number is 45 but actual matrix they wrote 46, ig its because they said they used "least square fit" and i used round
distance_matrix = distance_matrix.round().astype(int)


# this loads the distance matrix for the 15 cities 
graph = np.loadtxt('alg.txt', usecols=range(15), dtype=int) # using numpy to read distances from txt and store in array
print("actual distance matrix")
print(graph)
n = 15  # number of nodes/cities
visited = (1 << n) - 1
r,c=32768,15 # this is for the momoization table ig, c is n and r is ( 1 << 15) binary representation of 1 shifted 15 units to left
dp=[[-1 for j in range(c)]for i in range(r)]
for i in range(0, (1<<n)):
	for j in range(0, n):
		dp[i][j] = -1

print(TSP(1, 0, graph, dp, n, visited))

# trying with matrix from coordinates, but it gives 284 not 291
# print(TSP(1, 0, distance_matrix, dp, n, visited))

